{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar has = require('has');\nvar channel = require('side-channel')();\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar SLOT = {\n  assert: function (O, slot) {\n    if (!O || typeof O !== 'object' && typeof O !== 'function') {\n      throw new $TypeError('`O` is not an object');\n    }\n    if (typeof slot !== 'string') {\n      throw new $TypeError('`slot` must be a string');\n    }\n    channel.assert(O);\n    if (!SLOT.has(O, slot)) {\n      throw new $TypeError('`' + slot + '` is not present on `O`');\n    }\n  },\n  get: function (O, slot) {\n    if (!O || typeof O !== 'object' && typeof O !== 'function') {\n      throw new $TypeError('`O` is not an object');\n    }\n    if (typeof slot !== 'string') {\n      throw new $TypeError('`slot` must be a string');\n    }\n    var slots = channel.get(O);\n    return slots && slots['$' + slot];\n  },\n  has: function (O, slot) {\n    if (!O || typeof O !== 'object' && typeof O !== 'function') {\n      throw new $TypeError('`O` is not an object');\n    }\n    if (typeof slot !== 'string') {\n      throw new $TypeError('`slot` must be a string');\n    }\n    var slots = channel.get(O);\n    return !!slots && has(slots, '$' + slot);\n  },\n  set: function (O, slot, V) {\n    if (!O || typeof O !== 'object' && typeof O !== 'function') {\n      throw new $TypeError('`O` is not an object');\n    }\n    if (typeof slot !== 'string') {\n      throw new $TypeError('`slot` must be a string');\n    }\n    var slots = channel.get(O);\n    if (!slots) {\n      slots = {};\n      channel.set(O, slots);\n    }\n    slots['$' + slot] = V;\n  }\n};\nif (Object.freeze) {\n  Object.freeze(SLOT);\n}\nmodule.exports = SLOT;","map":{"version":3,"names":["GetIntrinsic","require","has","channel","$TypeError","SLOT","assert","O","slot","get","slots","set","V","Object","freeze","module","exports"],"sources":["C:/Users/trann/.vscode/BetterDay-Tool/frontend/node_modules/internal-slot/index.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar has = require('has');\nvar channel = require('side-channel')();\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar SLOT = {\n\tassert: function (O, slot) {\n\t\tif (!O || (typeof O !== 'object' && typeof O !== 'function')) {\n\t\t\tthrow new $TypeError('`O` is not an object');\n\t\t}\n\t\tif (typeof slot !== 'string') {\n\t\t\tthrow new $TypeError('`slot` must be a string');\n\t\t}\n\t\tchannel.assert(O);\n\t\tif (!SLOT.has(O, slot)) {\n\t\t\tthrow new $TypeError('`' + slot + '` is not present on `O`');\n\t\t}\n\t},\n\tget: function (O, slot) {\n\t\tif (!O || (typeof O !== 'object' && typeof O !== 'function')) {\n\t\t\tthrow new $TypeError('`O` is not an object');\n\t\t}\n\t\tif (typeof slot !== 'string') {\n\t\t\tthrow new $TypeError('`slot` must be a string');\n\t\t}\n\t\tvar slots = channel.get(O);\n\t\treturn slots && slots['$' + slot];\n\t},\n\thas: function (O, slot) {\n\t\tif (!O || (typeof O !== 'object' && typeof O !== 'function')) {\n\t\t\tthrow new $TypeError('`O` is not an object');\n\t\t}\n\t\tif (typeof slot !== 'string') {\n\t\t\tthrow new $TypeError('`slot` must be a string');\n\t\t}\n\t\tvar slots = channel.get(O);\n\t\treturn !!slots && has(slots, '$' + slot);\n\t},\n\tset: function (O, slot, V) {\n\t\tif (!O || (typeof O !== 'object' && typeof O !== 'function')) {\n\t\t\tthrow new $TypeError('`O` is not an object');\n\t\t}\n\t\tif (typeof slot !== 'string') {\n\t\t\tthrow new $TypeError('`slot` must be a string');\n\t\t}\n\t\tvar slots = channel.get(O);\n\t\tif (!slots) {\n\t\t\tslots = {};\n\t\t\tchannel.set(O, slots);\n\t\t}\n\t\tslots['$' + slot] = V;\n\t}\n};\n\nif (Object.freeze) {\n\tObject.freeze(SLOT);\n}\n\nmodule.exports = SLOT;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}